// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Utils = require("./Utils.bs.js");
var Pieces = require("./Pieces.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

var stroke = 12;

var size = 92;

function positionToId(x, y) {
  return "" + String.fromCharCode(x + 65 | 0) + "" + (y + 1 | 0).toString() + "";
}

function makeSquare(x, y, color) {
  return {
          piece: undefined,
          selection: false,
          movement: false,
          covered: false,
          coveredAndSelected: false,
          x: x,
          y: y,
          color: color,
          id: positionToId(x, y)
        };
}

function makeGrid(state) {
  var match = state.cursorPosition;
  var otherColor = Utils.oppositeColor(state.turn);
  var coveredPositions = Pieces.getCoveredPositionsForColor(state.board, otherColor);
  var emphasizedCoveredPositions = Pieces.getEmphasizedCoveredPositionsForColor(state.board, otherColor);
  var grid = Belt_Array.makeBy(8, (function (x) {
          return Belt_Array.makeBy(8, (function (y) {
                        return makeSquare(x, y, state.turn);
                      }));
        }));
  Belt_List.forEach(state.board.pieces, (function (p) {
          Caml_array.get(Caml_array.get(grid, Utils.getX(p)), Utils.getY(p)).piece = p;
        }));
  Belt_List.forEach(coveredPositions, (function (param) {
          Caml_array.get(Caml_array.get(grid, param[0]), param[1]).covered = true;
        }));
  Belt_List.forEach(emphasizedCoveredPositions, (function (param) {
          Caml_array.get(Caml_array.get(grid, param[0]), param[1]).coveredAndSelected = true;
        }));
  Caml_array.get(Caml_array.get(grid, match[0]), match[1]).selection = true;
  var p = state.selectedPiece;
  if (p !== undefined) {
    Caml_array.get(Caml_array.get(grid, Utils.getX(p)), Utils.getY(p)).selection = true;
    var l = state.legalMoves;
    if (l !== undefined) {
      Belt_List.forEach(l, (function (param) {
              Caml_array.get(Caml_array.get(grid, param[0]), param[1]).movement = true;
            }));
    }
    
  }
  return Belt_Array.concatMany(grid);
}

function getInCheck(square) {
  var match = square.piece;
  if (match !== undefined && match.TAG === /* King */1 && match._0.color === square.color) {
    return square.covered;
  } else {
    return false;
  }
}

function getColor(square) {
  if (square.x % 2 === square.y % 2) {
    return "maroon";
  } else {
    return "antiquewhite";
  }
}

function getOverlayColor(square) {
  var inCheck = getInCheck(square);
  var blueOrPurple = square.movement ? (
      square.covered ? "purple" : "blue"
    ) : "none";
  if (square.coveredAndSelected && !square.movement && !inCheck) {
    return "red";
  }
  var match = square.piece;
  if (match !== undefined && !inCheck && !square.movement && square.covered) {
    return "lightcoral";
  } else {
    return blueOrPurple;
  }
}

function getX(square) {
  var match = square.color;
  if (match === "White") {
    return Math.imul(square.x, size);
  } else {
    return Math.imul(7 - square.x | 0, size);
  }
}

function getY(square) {
  var match = square.color;
  if (match === "White") {
    return Math.imul(7 - square.y | 0, size);
  } else {
    return Math.imul(square.y, size);
  }
}

var scalingFactor = 4;

var assetSize = 23;

exports.scalingFactor = scalingFactor;
exports.assetSize = assetSize;
exports.stroke = stroke;
exports.size = size;
exports.positionToId = positionToId;
exports.makeSquare = makeSquare;
exports.makeGrid = makeGrid;
exports.getInCheck = getInCheck;
exports.getColor = getColor;
exports.getOverlayColor = getOverlayColor;
exports.getX = getX;
exports.getY = getY;
/* No side effect */
