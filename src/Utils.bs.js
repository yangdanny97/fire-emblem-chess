// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function oppositeColor(color) {
  if (color === "White") {
    return "Black";
  } else {
    return "White";
  }
}

function getAsset(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
        return "assets/" + piece._0.color + "/pawn";
    case /* King */1 :
        return "assets/" + piece._0.color + "/king";
    case /* Queen */2 :
        return "assets/" + piece._0.color + "/queen";
    case /* Bishop */3 :
        return "assets/" + piece._0.color + "/bishop";
    case /* Knight */4 :
        return "assets/" + piece._0.color + "/knight";
    case /* Rook */5 :
        return "assets/" + piece._0.color + "/rook";
    
  }
}

function getColor(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
    case /* King */1 :
        return piece._0.color;
    default:
      return piece._0.color;
  }
}

function getEmphasis(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
    case /* King */1 :
        return piece._0.emphasizeCoverRange;
    default:
      return piece._0.emphasizeCoverRange;
  }
}

function toggleEmphasis(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
    case /* King */1 :
        break;
    default:
      var x = piece._0;
      x.emphasizeCoverRange = !x.emphasizeCoverRange;
      return ;
  }
  var p = piece._0;
  p.emphasizeCoverRange = !p.emphasizeCoverRange;
}

function getX(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
    case /* King */1 :
        return piece._0.x;
    default:
      return piece._0.x;
  }
}

function getY(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
    case /* King */1 :
        return piece._0.y;
    default:
      return piece._0.y;
  }
}

function withMoved(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
        var p = piece._0;
        return {
                TAG: /* Pawn */0,
                _0: {
                  x: p.x,
                  y: p.y,
                  color: p.color,
                  hasMoved: true,
                  emphasizeCoverRange: p.emphasizeCoverRange,
                  hasJustMoved2Spaces: false
                }
              };
    case /* King */1 :
        var k = piece._0;
        return {
                TAG: /* King */1,
                _0: {
                  x: k.x,
                  y: k.y,
                  color: k.color,
                  hasMoved: true,
                  emphasizeCoverRange: k.emphasizeCoverRange,
                  inCheck: k.inCheck
                }
              };
    case /* Queen */2 :
        var p$1 = piece._0;
        return {
                TAG: /* Queen */2,
                _0: {
                  x: p$1.x,
                  y: p$1.y,
                  color: p$1.color,
                  hasMoved: true,
                  emphasizeCoverRange: p$1.emphasizeCoverRange
                }
              };
    case /* Bishop */3 :
        var p$2 = piece._0;
        return {
                TAG: /* Bishop */3,
                _0: {
                  x: p$2.x,
                  y: p$2.y,
                  color: p$2.color,
                  hasMoved: true,
                  emphasizeCoverRange: p$2.emphasizeCoverRange
                }
              };
    case /* Knight */4 :
        var p$3 = piece._0;
        return {
                TAG: /* Knight */4,
                _0: {
                  x: p$3.x,
                  y: p$3.y,
                  color: p$3.color,
                  hasMoved: true,
                  emphasizeCoverRange: p$3.emphasizeCoverRange
                }
              };
    case /* Rook */5 :
        var p$4 = piece._0;
        return {
                TAG: /* Rook */5,
                _0: {
                  x: p$4.x,
                  y: p$4.y,
                  color: p$4.color,
                  hasMoved: true,
                  emphasizeCoverRange: p$4.emphasizeCoverRange
                }
              };
    
  }
}

function with2Spaces(p) {
  return {
          TAG: /* Pawn */0,
          _0: {
            x: p.x,
            y: p.y,
            color: p.color,
            hasMoved: true,
            emphasizeCoverRange: p.emphasizeCoverRange,
            hasJustMoved2Spaces: true
          }
        };
}

function disable2Spaces(p) {
  return {
          TAG: /* Pawn */0,
          _0: {
            x: p.x,
            y: p.y,
            color: p.color,
            hasMoved: p.hasMoved,
            emphasizeCoverRange: p.emphasizeCoverRange,
            hasJustMoved2Spaces: false
          }
        };
}

function withPosition(piece, param) {
  var y = param[1];
  var x = param[0];
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
        var p = piece._0;
        return {
                TAG: /* Pawn */0,
                _0: {
                  x: x,
                  y: y,
                  color: p.color,
                  hasMoved: p.hasMoved,
                  emphasizeCoverRange: p.emphasizeCoverRange,
                  hasJustMoved2Spaces: p.hasJustMoved2Spaces
                }
              };
    case /* King */1 :
        var k = piece._0;
        return {
                TAG: /* King */1,
                _0: {
                  x: x,
                  y: y,
                  color: k.color,
                  hasMoved: k.hasMoved,
                  emphasizeCoverRange: k.emphasizeCoverRange,
                  inCheck: k.inCheck
                }
              };
    case /* Queen */2 :
        var p$1 = piece._0;
        return {
                TAG: /* Queen */2,
                _0: {
                  x: x,
                  y: y,
                  color: p$1.color,
                  hasMoved: p$1.hasMoved,
                  emphasizeCoverRange: p$1.emphasizeCoverRange
                }
              };
    case /* Bishop */3 :
        var p$2 = piece._0;
        return {
                TAG: /* Bishop */3,
                _0: {
                  x: x,
                  y: y,
                  color: p$2.color,
                  hasMoved: p$2.hasMoved,
                  emphasizeCoverRange: p$2.emphasizeCoverRange
                }
              };
    case /* Knight */4 :
        var p$3 = piece._0;
        return {
                TAG: /* Knight */4,
                _0: {
                  x: x,
                  y: y,
                  color: p$3.color,
                  hasMoved: p$3.hasMoved,
                  emphasizeCoverRange: p$3.emphasizeCoverRange
                }
              };
    case /* Rook */5 :
        var p$4 = piece._0;
        return {
                TAG: /* Rook */5,
                _0: {
                  x: x,
                  y: y,
                  color: p$4.color,
                  hasMoved: p$4.hasMoved,
                  emphasizeCoverRange: p$4.emphasizeCoverRange
                }
              };
    
  }
}

function promotionRank(p) {
  var match = p.color;
  if (match === "White") {
    return 7;
  } else {
    return 0;
  }
}

function backRank(p) {
  var match = p.color;
  if (match === "White") {
    return 0;
  } else {
    return 7;
  }
}

function pawnOffsetHelper(p, n) {
  var match = p.color;
  if (match === "White") {
    return n;
  } else {
    return -n | 0;
  }
}

function pawn(color, x, y) {
  return {
          TAG: /* Pawn */0,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false,
            hasJustMoved2Spaces: false
          }
        };
}

function king(color, x, y) {
  return {
          TAG: /* King */1,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false,
            inCheck: false
          }
        };
}

function queen(color, x, y) {
  return {
          TAG: /* Queen */2,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false
          }
        };
}

function rook(color, x, y) {
  return {
          TAG: /* Rook */5,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false
          }
        };
}

function bishop(color, x, y) {
  return {
          TAG: /* Bishop */3,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false
          }
        };
}

function knight(color, x, y) {
  return {
          TAG: /* Knight */4,
          _0: {
            x: x,
            y: y,
            color: color,
            hasMoved: false,
            emphasizeCoverRange: false
          }
        };
}

exports.oppositeColor = oppositeColor;
exports.getAsset = getAsset;
exports.getColor = getColor;
exports.getEmphasis = getEmphasis;
exports.toggleEmphasis = toggleEmphasis;
exports.getX = getX;
exports.getY = getY;
exports.withMoved = withMoved;
exports.with2Spaces = with2Spaces;
exports.disable2Spaces = disable2Spaces;
exports.withPosition = withPosition;
exports.promotionRank = promotionRank;
exports.backRank = backRank;
exports.pawnOffsetHelper = pawnOffsetHelper;
exports.pawn = pawn;
exports.king = king;
exports.queen = queen;
exports.rook = rook;
exports.bishop = bishop;
exports.knight = knight;
/* No side effect */
